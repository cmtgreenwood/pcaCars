recur.ctdnaneg <- 0.10
nlist <- c(100, 150)
lowerbound.ppv.list <- 0.80
lowerbound.npv.list <- 0.80
nsim <-100
testresults1 <- array(NA, dim = c(nsim, length(nlist), 4))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist),
c("Pos.Rec","Pos.NoRec","Neg.Rec","Neg.NoRec"))
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
recur <- rep(0,n)
gp0 <- (pos.ctdna.pre==0)
gp1 <- (pos.ctdna.pre==1)
recur[gp0] <- rbinom(sum(gp0),1,0.10)
recur[gp1] <- rbinom(sum(gp1),1,0.60)
testresults1[i.sim, i.n,1] <- sum(pos.ctdna.pre==1 & recur==1)
testresults1[i.sim, i.n,2] <- sum(pos.ctdna.pre==1 & recur==0)
testresults1[i.sim, i.n,3] <- sum(pos.ctdna.pre==0 & recur==1)
testresults1[i.sim, i.n,4] <- sum(pos.ctdna.pre==0 & recur==0)
}
}
ppv1 <- testresults1[, ,1]/(testresults1[, ,1]+testresults1[, ,2])
npv1 <- testresults1[, ,4]/(testresults1[, ,3]+testresults1[, ,4])
#positive predictive value
sum(ppv1<lowerbound.ppv.list)/nsim
#negative predictive value
sum(npv1<lowerbound.npv.list)/nsim
ppv1 <- testresults1[, ,1]/(testresults1[, ,1]+testresults1[, ,2])
npv1 <- testresults1[, ,4]/(testresults1[, ,3]+testresults1[, ,4])
#positive predictive value
apply(ppv1<lowerbound.ppv.list,2,sum)/nsim
#negative predictive value
apply(npv1<lowerbound.npv.list,2,sum)/nsim
lowerbound.ppv.list
ppv1
npv1
prop.ctdnapos.pre <- 0.40
recur.ctdnapos <- 0.60
recur.ctdnaneg <- 0.10
nlist <- c(100, 150)
lowerbound.ppv.list <- 0.60
lowerbound.npv.list <- 0.80
nsim <-100
testresults1 <- array(NA, dim = c(nsim, length(nlist), 4))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist),
c("Pos.Rec","Pos.NoRec","Neg.Rec","Neg.NoRec"))
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
recur <- rep(0,n)
gp0 <- (pos.ctdna.pre==0)
gp1 <- (pos.ctdna.pre==1)
recur[gp0] <- rbinom(sum(gp0),1,0.10)
recur[gp1] <- rbinom(sum(gp1),1,0.60)
testresults1[i.sim, i.n,1] <- sum(pos.ctdna.pre==1 & recur==1)
testresults1[i.sim, i.n,2] <- sum(pos.ctdna.pre==1 & recur==0)
testresults1[i.sim, i.n,3] <- sum(pos.ctdna.pre==0 & recur==1)
testresults1[i.sim, i.n,4] <- sum(pos.ctdna.pre==0 & recur==0)
}
}
ppv1 <- testresults1[, ,1]/(testresults1[, ,1]+testresults1[, ,2])
npv1 <- testresults1[, ,4]/(testresults1[, ,3]+testresults1[, ,4])
#positive predictive value
apply(ppv1<lowerbound.ppv.list,2,sum)/nsim
#negative predictive value
apply(npv1<lowerbound.npv.list,2,sum)/nsim
prop.ctdnapos.pre <- 0.40
recur.ctdnapos <- 0.60
recur.ctdnaneg <- 0.10
nlist <- c(100, 150)
lowerbound.ppv.list <- 0.60
lowerbound.npv.list <- 0.80
nsim <-1000
testresults1 <- array(NA, dim = c(nsim, length(nlist), 4))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist),
c("Pos.Rec","Pos.NoRec","Neg.Rec","Neg.NoRec"))
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
recur <- rep(0,n)
gp0 <- (pos.ctdna.pre==0)
gp1 <- (pos.ctdna.pre==1)
recur[gp0] <- rbinom(sum(gp0),1,0.10)
recur[gp1] <- rbinom(sum(gp1),1,0.60)
testresults1[i.sim, i.n,1] <- sum(pos.ctdna.pre==1 & recur==1)
testresults1[i.sim, i.n,2] <- sum(pos.ctdna.pre==1 & recur==0)
testresults1[i.sim, i.n,3] <- sum(pos.ctdna.pre==0 & recur==1)
testresults1[i.sim, i.n,4] <- sum(pos.ctdna.pre==0 & recur==0)
}
}
ppv1 <- testresults1[, ,1]/(testresults1[, ,1]+testresults1[, ,2])
npv1 <- testresults1[, ,4]/(testresults1[, ,3]+testresults1[, ,4])
#positive predictive value
apply(ppv1<lowerbound.ppv.list,2,sum)/nsim
#negative predictive value
apply(npv1<lowerbound.npv.list,2,sum)/nsim
prop.ctdnapos.pre <- 0.40
recur.ctdnapos <- 0.60
recur.ctdnaneg <- 0.10
nlist <- c(100, 150)
lowerbound.ppv.list <- 0.60
lowerbound.npv.list <- 0.80
nsim <-1000
testresults1 <- array(NA, dim = c(nsim, length(nlist), 4))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist),
c("Pos.Rec","Pos.NoRec","Neg.Rec","Neg.NoRec"))
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
recur <- rep(0,n)
gp0 <- (pos.ctdna.pre==0)
gp1 <- (pos.ctdna.pre==1)
recur[gp0] <- rbinom(sum(gp0),1,0.10)
recur[gp1] <- rbinom(sum(gp1),1,0.60)
testresults1[i.sim, i.n,1] <- sum(pos.ctdna.pre==1 & recur==1)
testresults1[i.sim, i.n,2] <- sum(pos.ctdna.pre==1 & recur==0)
testresults1[i.sim, i.n,3] <- sum(pos.ctdna.pre==0 & recur==1)
testresults1[i.sim, i.n,4] <- sum(pos.ctdna.pre==0 & recur==0)
}
}
ppv1 <- testresults1[, ,1]/(testresults1[, ,1]+testresults1[, ,2])
npv1 <- testresults1[, ,4]/(testresults1[, ,3]+testresults1[, ,4])
#positive predictive value
apply(ppv1<lowerbound.ppv.list,2,sum)/nsim
#negative predictive value
apply(npv1<lowerbound.npv.list,2,sum)/nsim
prop.ctdnapos.pre <- 0.40
recur.ctdnapos <- 0.60
recur.ctdnaneg <- 0.10
nlist <- c(100, 150)
lowerbound.ppv.list <- 0.60
lowerbound.npv.list <- 0.80
nsim <-2000
testresults1 <- array(NA, dim = c(nsim, length(nlist), 4))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist),
c("Pos.Rec","Pos.NoRec","Neg.Rec","Neg.NoRec"))
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
recur <- rep(0,n)
gp0 <- (pos.ctdna.pre==0)
gp1 <- (pos.ctdna.pre==1)
recur[gp0] <- rbinom(sum(gp0),1,0.10)
recur[gp1] <- rbinom(sum(gp1),1,0.60)
testresults1[i.sim, i.n,1] <- sum(pos.ctdna.pre==1 & recur==1)
testresults1[i.sim, i.n,2] <- sum(pos.ctdna.pre==1 & recur==0)
testresults1[i.sim, i.n,3] <- sum(pos.ctdna.pre==0 & recur==1)
testresults1[i.sim, i.n,4] <- sum(pos.ctdna.pre==0 & recur==0)
}
}
ppv1 <- testresults1[, ,1]/(testresults1[, ,1]+testresults1[, ,2])
npv1 <- testresults1[, ,4]/(testresults1[, ,3]+testresults1[, ,4])
#positive predictive value
apply(ppv1<lowerbound.ppv.list,2,sum)/nsim
#negative predictive value
apply(npv1<lowerbound.npv.list,2,sum)/nsim
ppv1
mean(ppv1)
mean(npv1)
npv1
dim(testresults1)
prop.ctdnapos.pre <- 0.40
recur.ctdnapos <- 0.60
recur.ctdnaneg <- 0.10
nlist <- c(100, 150, 500, 1000)
bound.ppv.list <- 0.75
bound.npv.list <- 0.80
nsim <-5
testresults1 <- array(NA, dim = c(nsim, length(nlist), 4))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist),
c("Pos.Rec","Pos.NoRec","Neg.Rec","Neg.NoRec"))
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
recur <- rep(0,n)
gp0 <- (pos.ctdna.pre==0)
gp1 <- (pos.ctdna.pre==1)
recur[gp0] <- rbinom(sum(gp0),1,0.10)
recur[gp1] <- rbinom(sum(gp1),1,0.60)
testresults1[i.sim, i.n,1] <- sum(pos.ctdna.pre==1 & recur==1)
testresults1[i.sim, i.n,2] <- sum(pos.ctdna.pre==1 & recur==0)
testresults1[i.sim, i.n,3] <- sum(pos.ctdna.pre==0 & recur==1)
testresults1[i.sim, i.n,4] <- sum(pos.ctdna.pre==0 & recur==0)
}
}
ppv1 <- testresults1[, ,1]/(testresults1[, ,1]+testresults1[, ,2])
npv1 <- testresults1[, ,4]/(testresults1[, ,3]+testresults1[, ,4])
mean(ppv1)
mean(npv1)
#positive predictive value
apply(ppv1>bound.ppv.list,2,sum)/nsim
#negative predictive value
apply(npv1<bound.npv.list,2,sum)/nsim
prop.ctdnapos.pre <- 0.40
recur.ctdnapos <- 0.60
recur.ctdnaneg <- 0.10
nlist <- c(100, 150, 500)
bound.ppv.list <- 0.75
bound.npv.list <- 0.80
nsim <-500
testresults1 <- array(NA, dim = c(nsim, length(nlist), 4))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist),
c("Pos.Rec","Pos.NoRec","Neg.Rec","Neg.NoRec"))
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
recur <- rep(0,n)
gp0 <- (pos.ctdna.pre==0)
gp1 <- (pos.ctdna.pre==1)
recur[gp0] <- rbinom(sum(gp0),1,0.10)
recur[gp1] <- rbinom(sum(gp1),1,0.60)
testresults1[i.sim, i.n,1] <- sum(pos.ctdna.pre==1 & recur==1)
testresults1[i.sim, i.n,2] <- sum(pos.ctdna.pre==1 & recur==0)
testresults1[i.sim, i.n,3] <- sum(pos.ctdna.pre==0 & recur==1)
testresults1[i.sim, i.n,4] <- sum(pos.ctdna.pre==0 & recur==0)
}
}
ppv1 <- testresults1[, ,1]/(testresults1[, ,1]+testresults1[, ,2])
npv1 <- testresults1[, ,4]/(testresults1[, ,3]+testresults1[, ,4])
mean(ppv1)
mean(npv1)
#positive predictive value
apply(ppv1>bound.ppv.list,2,sum)/nsim
#negative predictive value
apply(npv1<bound.npv.list,2,sum)/nsim
prop.ctdnapos.pre <- 0.40
recur.ctdnapos <- 0.60
recur.ctdnaneg <- 0.10
nlist <- c(100, 150, 500)
bound.ppv.list <- 0.75
bound.npv.list <- 0.80
nsim <-1000
testresults1 <- array(NA, dim = c(nsim, length(nlist), 4))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist),
c("Pos.Rec","Pos.NoRec","Neg.Rec","Neg.NoRec"))
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
recur <- rep(0,n)
gp0 <- (pos.ctdna.pre==0)
gp1 <- (pos.ctdna.pre==1)
recur[gp0] <- rbinom(sum(gp0),1,0.10)
recur[gp1] <- rbinom(sum(gp1),1,0.60)
testresults1[i.sim, i.n,1] <- sum(pos.ctdna.pre==1 & recur==1)
testresults1[i.sim, i.n,2] <- sum(pos.ctdna.pre==1 & recur==0)
testresults1[i.sim, i.n,3] <- sum(pos.ctdna.pre==0 & recur==1)
testresults1[i.sim, i.n,4] <- sum(pos.ctdna.pre==0 & recur==0)
}
}
ppv1 <- testresults1[, ,1]/(testresults1[, ,1]+testresults1[, ,2])
npv1 <- testresults1[, ,4]/(testresults1[, ,3]+testresults1[, ,4])
mean(ppv1)
mean(npv1)
#positive predictive value
apply(ppv1>bound.ppv.list,2,sum)/nsim
#negative predictive value
apply(npv1<bound.npv.list,2,sum)/nsim
prop.ctdnapos.pre <- 0.40
recur.ctdnapos <- 0.60
recur.ctdnaneg <- 0.10
nlist <- c(100, 150, 500)
bound.ppv.list <- 0.75
bound.npv.list <- 0.85
nsim <-1000
testresults1 <- array(NA, dim = c(nsim, length(nlist), 4))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist),
c("Pos.Rec","Pos.NoRec","Neg.Rec","Neg.NoRec"))
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
recur <- rep(0,n)
gp0 <- (pos.ctdna.pre==0)
gp1 <- (pos.ctdna.pre==1)
recur[gp0] <- rbinom(sum(gp0),1,0.10)
recur[gp1] <- rbinom(sum(gp1),1,0.60)
testresults1[i.sim, i.n,1] <- sum(pos.ctdna.pre==1 & recur==1)
testresults1[i.sim, i.n,2] <- sum(pos.ctdna.pre==1 & recur==0)
testresults1[i.sim, i.n,3] <- sum(pos.ctdna.pre==0 & recur==1)
testresults1[i.sim, i.n,4] <- sum(pos.ctdna.pre==0 & recur==0)
}
}
ppv1 <- testresults1[, ,1]/(testresults1[, ,1]+testresults1[, ,2])
npv1 <- testresults1[, ,4]/(testresults1[, ,3]+testresults1[, ,4])
mean(ppv1)
mean(npv1)
#positive predictive value
apply(ppv1>bound.ppv.list,2,sum)/nsim
#negative predictive value
apply(npv1<bound.npv.list,2,sum)/nsim
prop.ctdnapos.pre <- 0.40
recur.ctdnapos <- 0.60
recur.ctdnaneg <- 0.10
nlist <- c(100, 150, 500)
bound.ppv.list <- 0.70
bound.npv.list <- 0.85
nsim <-1000
testresults1 <- array(NA, dim = c(nsim, length(nlist), 4))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist),
c("Pos.Rec","Pos.NoRec","Neg.Rec","Neg.NoRec"))
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
recur <- rep(0,n)
gp0 <- (pos.ctdna.pre==0)
gp1 <- (pos.ctdna.pre==1)
recur[gp0] <- rbinom(sum(gp0),1,0.10)
recur[gp1] <- rbinom(sum(gp1),1,0.60)
testresults1[i.sim, i.n,1] <- sum(pos.ctdna.pre==1 & recur==1)
testresults1[i.sim, i.n,2] <- sum(pos.ctdna.pre==1 & recur==0)
testresults1[i.sim, i.n,3] <- sum(pos.ctdna.pre==0 & recur==1)
testresults1[i.sim, i.n,4] <- sum(pos.ctdna.pre==0 & recur==0)
}
}
ppv1 <- testresults1[, ,1]/(testresults1[, ,1]+testresults1[, ,2])
npv1 <- testresults1[, ,4]/(testresults1[, ,3]+testresults1[, ,4])
mean(ppv1)
mean(npv1)
#positive predictive value
apply(ppv1>bound.ppv.list,2,sum)/nsim
#negative predictive value
apply(npv1<bound.npv.list,2,sum)/nsim
3974.88/70
56.784*35*52
q()
x <- 1:4
(z <- x %*% x)    # scalar ("inner") product (1 x 1 matrix)
drop(z)             # as scalar
y <- diag(x)
x
y
z <- matrix(1:12, ncol = 3, nrow = 4)
y %*% z
y %*% x
x %*% z
y
?rowProd\
?rowProd
?rowSum
??rowSum
?crossprod
crossprod(x, y)
z <- matrix(1:6, ncol = 3, nrow = 2)
x < c(2,4)
z
?sweep
apply(z,2, fn(zcol) {zcol*x})
apply(z,2, fn(zcol) zcol*x,x)
sweep(z, 1, STATS=x, FUN="*")
x
x <- c(2,4)
sweep(z, 1, STATS=x, FUN="*")
knitr::opts_chunk$set(echo = TRUE)
prop.ctdnapos.pre <- 0.40
recur.ctdnapos <- 0.60
recur.ctdnaneg <- 0.10
nlist <- c(100, 150)
p.post.list <- c(0.25, 0.20)
nsim <- 1000
testresults1 <- array(NA, dim = c(nsim, length(nlist), length(p.post.list)))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist), paste(p.post.list))
testresults2 <-testresults1
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
i.p <- 0
for (prop.ctdnapos.post in p.post.list) {
i.p <- i.p + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
pos.ctdna.post <- rep(0,n)
pos.ctdna.post[pos.ctdna.pre==1] <- rbinom(sum(pos.ctdna.pre),1,
prop.ctdnapos.post)
recur <- rep(0,n)
gp00 <- (pos.ctdna.pre==0)
gp11 <- (pos.ctdna.pre==1 & pos.ctdna.post==1)
gp10 <- (pos.ctdna.pre==1 & pos.ctdna.post==0)
recur[gp00] <- rbinom(sum(gp00),1,0.10)
recur[gp11] <- rbinom(sum(gp11),1,0.60)
recur[gp10] <- rbinom(sum(gp10),1,0.10)
# compare gp11 to gp10 versus recurrence
if (sum(recur[!gp00])>0) {
testresults1[i.sim,i.n,i.p] <- fisher.test(recur[!gp00], pos.ctdna.post[!gp00])$p.value
}
# compare ctdna.post status vs. recurrence
if (sum(recur)>0) {
testresults2[i.sim,i.n,i.p] <- fisher.test(recur, pos.ctdna.post)$p.value
}
}
}
}
power1  <- apply( testresults1<0.05, c(2,3), mean, na.rm=TRUE)
power2 <- apply(testresults2<0.05, c(2,3), mean, na.rm=TRUE)
# Power for first test (2 values of N, 2 values of p post)
power1
# power for second test (2 values of N, 2 values of p post)
power2
prop.ctdnapos.pre <- 0.40
recur.ctdnapos <- 0.60
recur.ctdnaneg <- 0.10
nlist <- c(100, 150)
p.post.list <- c(0.25, 0.20)
nsim <- 2000
testresults1 <- array(NA, dim = c(nsim, length(nlist), length(p.post.list)))
dimnames(testresults1) <- list(paste((1:nsim)),
paste(nlist), paste(p.post.list))
testresults2 <-testresults1
for (i.sim in (1:nsim))  {
i.n <- 0
for (n in nlist) {
i.n <- i.n + 1
i.p <- 0
for (prop.ctdnapos.post in p.post.list) {
i.p <- i.p + 1
pos.ctdna.pre <- rbinom(n, 1, prop.ctdnapos.pre)
pos.ctdna.post <- rep(0,n)
pos.ctdna.post[pos.ctdna.pre==1] <- rbinom(sum(pos.ctdna.pre),1,
prop.ctdnapos.post)
recur <- rep(0,n)
gp00 <- (pos.ctdna.pre==0)
gp11 <- (pos.ctdna.pre==1 & pos.ctdna.post==1)
gp10 <- (pos.ctdna.pre==1 & pos.ctdna.post==0)
recur[gp00] <- rbinom(sum(gp00),1,0.10)
recur[gp11] <- rbinom(sum(gp11),1,0.60)
recur[gp10] <- rbinom(sum(gp10),1,0.10)
# compare gp11 to gp10 versus recurrence
if (sum(recur[!gp00])>0) {
testresults1[i.sim,i.n,i.p] <- fisher.test(recur[!gp00], pos.ctdna.post[!gp00])$p.value
}
# compare ctdna.post status vs. recurrence
if (sum(recur)>0) {
testresults2[i.sim,i.n,i.p] <- fisher.test(recur, pos.ctdna.post)$p.value
}
}
}
}
power1  <- apply( testresults1<0.05, c(2,3), mean, na.rm=TRUE)
power2 <- apply(testresults2<0.05, c(2,3), mean, na.rm=TRUE)
# Power for first test (2 values of N, 2 values of p post)
power1
# power for second test (2 values of N, 2 values of p post)
power2
x <- c(mean(7,8.5),10,8, 8.0, mean(0.97,9.75, 9.5, 9.5, 9.75), mean(9,9,7.5), 9.29 )
mean(x)
x
x <- c(mean(c(7,8.5)),10,8, 8.0, mean(c(0.97,9.75, 9.5, 9.5, 9.75)), mean(c(9,9,7.5)), 9.29 )
x
mean(x)
q()
help(lm.fit)
```{r}
N <- 200
lambda <- 10
Y <- rpois(N, lambda)
X <- cbind(rep(1,N), rnorm(N))
Z <- as.matrix(rbinom(N, 1, 0.3),ncol=1)
fit <- lm.fit(cbind(X,Z),Y)
Yfit <- fit$fitted.values
fit
summary(fit)
Yfit
Intercepts <- fit$coefficients[1,]
res <- Y - Yfit
fit$coefficients
q()
setwd("C:/CeliaFiles/GitHub/pcaCars")
setwd("C:/users/celia.greenwood/GitHub/pcaCars")
setwd("C:/users/celia.greenwood/Documents/GitHub/pcaCars")
# scree plot
plot(pcaCars, type = "l")
# cor = TRUE indicates that PCA is performed on
# standardized data (mean = 0, variance = 1)
pcaCars <- princomp(mtcars, cor = TRUE)
# view objects stored in pcaCars
names(pcaCars)
# proportion of variance explained
summary(pcaCars)
# scree plot
plot(pcaCars, type = "l")
source('~/GitHub/pcaCars/pca.R')
q()
